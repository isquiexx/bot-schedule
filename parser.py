import requests
import re
from bs4 import BeautifulSoup

def get_time_mapping():
    return {
        '1': '8:15-9:15',
        '2': '9:25-10:25',
        '3': '10:35-11:35',
        '4': '12:15-13:15',
        '5': '13:25-14:25',
        '6': '14:35-15:35',
        '7': '16:05-17:05',
        '8': '17:15-18:15',
        '9': '18:25-19:25'
    }



def get_nearest_schedule(url):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º rowspan –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
    """
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'lxml')
        time_mapping = get_time_mapping()

        # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        date_cells = []
        all_cells = soup.find_all('td', class_='hd')

        for cell in all_cells:
            if cell.get('rowspan') and re.search(r'\d{2}\.\d{2}\.\d{4}', cell.text):
                date_cells.append(cell)

        if not date_cells:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"

        # 2. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–±–ª–∏–∂–∞–π—à—É—é) –¥–∞—Ç—É
        first_date_cell = date_cells[0]
        date_text = first_date_cell.get_text(separator=' ', strip=True).split(' ')[0]

        # 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        all_rows = soup.find_all('tr')
        date_row = first_date_cell.find_parent('tr')

        if not date_row:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π"

        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è —á–µ—Ä–µ–∑ rowspan
        rowspan = int(first_date_cell.get('rowspan', 1))
        date_row_index = all_rows.index(date_row)

        # 5. –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        schedule_data = []

        for i in range(date_row_index, date_row_index + rowspan):
            if i >= len(all_rows):
                break

            current_row = all_rows[i]
            cells = current_row.find_all('td')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            if len(cells) == 1 and cells[0].get('rowspan'):
                continue

            # –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ
            for j, cell in enumerate(cells):
                if ('hd' in cell.get('class', []) and
                        cell.text.strip().isdigit() and
                        not cell.get('rowspan')):

                    pair_number = cell.text.strip()
                    pair_time = time_mapping.get(pair_number, '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')

                    # –ò—â–µ–º —è—á–µ–π–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ (—Å–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞)
                    if j + 1 < len(cells):
                        info_cell = cells[j + 1]
                        if 'ur' in info_cell.get('class', []):
                            subject_tag = info_cell.find('a', class_='z1')
                            subject = subject_tag.text.strip() if subject_tag else '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'

                            room_tag = info_cell.find('a', class_='z2')
                            room = room_tag.text.strip() if room_tag else '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'

                            teacher_tag = info_cell.find('a', class_='z3')
                            teacher = teacher_tag.text.strip() if teacher_tag else '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'

                            schedule_entry = {
                                'number': pair_number,
                                'time': pair_time,
                                'subject': subject,
                                'teacher': teacher,
                                'room': room
                            }
                            schedule_data.append(schedule_entry)

        return format_nearest_schedule(date_text, schedule_data)

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"


def format_nearest_schedule(date_text, pairs):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
    """
    if not pairs:
        return f"üìÖ {date_text}\n\n–ü–∞—Ä –Ω–µ—Ç! üéâ"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
    pairs.sort(key=lambda x: int(x['number']))

    # –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    greetings = [
        "–Ø —Ç–≤–æ–π –±–æ—Ç–∞–Ω–∏–∫! ü§ì –í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        "–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å—Ç—É–¥–µ–Ω—Ç! üìö",
        "–ë–æ—Ç-–±–æ—Ç–∞–Ω–∏–∫ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! üß™",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä! üî¨"
    ]

    import random
    greeting = random.choice(greetings)

    result = [f"{greeting}\nüìÖ {date_text}\n"]

    for i, pair in enumerate(pairs):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É
        result.append(
            f"üîπ {pair['number']} –ø–∞—Ä–∞ ({pair['time']})\n"
            f"üìö {pair['subject']}\n"
            f"üë®‚Äçüè´ {pair['teacher']}\n"
            f"üö™ –ö–∞–±–∏–Ω–µ—Ç {pair['room']}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ 3-–π –ø–∞—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å 4-—è –ø–∞—Ä–∞)
        if pair['number'] == '3' and i + 1 < len(pairs) and pairs[i + 1]['number'] == '4':
            result.append("‚è∞ –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: 11:35-12:15 üçî\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ 6-–π –ø–∞—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å 7-—è –ø–∞—Ä–∞)
        elif pair['number'] == '6' and i + 1 < len(pairs) and pairs[i + 1]['number'] == '7':
            result.append("‚è∞ –í–µ—á–µ—Ä–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤: 15:35-16:05 ‚òï\n")

    return "\n".join(result)